<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="logpath" elementType="Argument">
            <stringProp name="Argument.name">logpath</stringProp>
            <stringProp name="Argument.value">${__P(logpath, /Users/jakubdering/Desktop/event-driven-tutorial/lgtm/intro-to-mltp/promtail/logs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp OTEL" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Initialize OT" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk;
import io.opentelemetry.sdk.trace.SdkTracerProvider;
import io.opentelemetry.api.GlobalOpenTelemetry;


try {
  AutoConfiguredOpenTelemetrySdk.initialize()
} catch (Exception e)
{
log.error(&quot;failed to initialize OpenTelemetry, error : &quot; + e.getMessage());
	
}
def sdk = GlobalOpenTelemetry.get();

props.put(&quot;sdk&quot;, sdk);
def tracer = sdk.getTracer(&quot;totally-not-jmeter&quot;, &quot;0.0.1&quot;);
props.put(&quot;tracer&quot;,tracer);

</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OTEL - HTTP Calls " enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">500</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sample HTTP Request" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">google.com</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Sample HTTP Request" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">false</boolProp>
          <stringProp name="RESPONSE_CODE">500</stringProp>
          <stringProp name="RESPONSE_MESSAGE">Something Went Wrong</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(30,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,200)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,55)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Sample HTTP Request" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">false</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(30,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,200)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,55)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Sample HTTP Request" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">302</stringProp>
          <stringProp name="RESPONSE_MESSAGE">Redirected</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(30,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,200)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,55)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Fast HTTP Request" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">302</stringProp>
          <stringProp name="RESPONSE_MESSAGE">Redirected</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(30,50)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,5)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,3)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Second HTTP Request" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">linkedin.com</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Third HTTP Request" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">linkedin.com</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">traceparent</stringProp>
              <stringProp name="Header.value">${traceparent}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="OpenTelemetry Start Span" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.threads.JMeterVariables;
import io.opentelemetry.context.propagation.TextMapSetter;
import io.opentelemetry.context.Context;
import io.opentelemetry.api.trace.Span;



def tracer = props.get(&quot;tracer&quot;);

def currentSpan = tracer.spanBuilder(&quot;http request&quot;).setParent(Context.root()).startSpan();
def scope = currentSpan.makeCurrent();
vars.putObject(&quot;currentSpan&quot;, currentSpan);
vars.putObject(&quot;currentScope&quot;, scope);

TextMapSetter&lt;JMeterVariables&gt; setter = new TextMapSetter&lt;JMeterVariables&gt;() {
	@Override
	public void set(JMeterVariables carrier, String key, String value){
			carrier.put(key, value);
	}
}
vars.put(&quot;traceID&quot;, Span.current().getSpanContext().getTraceId().toString());
props.get(&quot;sdk&quot;).getPropagators().getTextMapPropagator().inject(Context.current().with(currentSpan), vars, setter);


</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OpenTelemetry End Span" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import io.opentelemetry.context.Context;
import org.apache.jmeter.protocol.http.sampler.HTTPSampleResult;


def currentSpan = vars.getObject(&quot;currentSpan&quot;);
def currentScope = vars.getObject(&quot;currentScope&quot;);
currentSpan.updateName(prev.getSampleLabel());


currentScope.close();
currentSpan.end();
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PostProcessor>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Kafka Producers" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1292970976">requestTopic</stringProp>
            <stringProp name="1666468206">responseTopic</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-14293054">
              <stringProp name="-231258033">Waiter-Requests</stringProp>
              <stringProp name="-1233085145">Waiter-Responses</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create Producer" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;

import java.util.Properties;

// Set up the producer configuration
Properties props = new Properties();
props.put(&quot;bootstrap.servers&quot;, &quot;localhost:29092&quot;); // Kafka broker address
props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);
props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);
props.put(&quot;acks&quot;, &quot;all&quot;);

// Create the producer
Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);

vars.putObject(&quot;producer&quot;, producer);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Send Request" enabled="true">
          <stringProp name="LoopController.loops">100</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Send Kafka Request" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.clients.producer.Callback;
import io.opentelemetry.api.trace.Span;

def producer = vars.getObject(&quot;producer&quot;);
def record = new ProducerRecord&lt;&gt;(vars.get(&quot;requestTopic&quot;), UUID.randomUUID().toString(), &quot;Kuba&quot;);
record.headers().add(&quot;traceparent&quot;, vars.get(&quot;traceparent&quot;).getBytes());
record.headers().add(&quot;responseTopic&quot;, vars.get(&quot;responseTopic&quot;).getBytes());
def span = vars.getObject(&quot;currentSpan&quot;);
span.addEvent(&quot;send-to-topic-start&quot;);
def recordFuture = producer.send(record);
span.addEvent(&quot;send-to-topic-end&quot;);

//this piece here waits for acks
recordFuture.get();
span.addEvent(&quot;send-to-topic-ack&quot;);</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="OpenTelemetry Start Span" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.threads.JMeterVariables;
import io.opentelemetry.context.propagation.TextMapSetter;
import io.opentelemetry.context.Context;
import io.opentelemetry.api.trace.Span;



def tracer = props.get(&quot;tracer&quot;);

def currentSpan = tracer.spanBuilder(&quot;http request&quot;).setParent(Context.root()).startSpan();
def scope = currentSpan.makeCurrent();
vars.putObject(&quot;currentSpan&quot;, currentSpan);
vars.putObject(&quot;currentScope&quot;, scope);

TextMapSetter&lt;JMeterVariables&gt; setter = new TextMapSetter&lt;JMeterVariables&gt;() {
	@Override
	public void set(JMeterVariables carrier, String key, String value){
			carrier.put(key, value);
	}
}
vars.put(&quot;traceID&quot;, Span.current().getSpanContext().getTraceId().toString());
props.get(&quot;sdk&quot;).getPropagators().getTextMapPropagator().inject(Context.current().with(currentSpan), vars, setter);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OpenTelemetry End Span" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import io.opentelemetry.context.Context;
import org.apache.jmeter.protocol.http.sampler.HTTPSampleResult;


def currentSpan = vars.getObject(&quot;currentSpan&quot;);
def currentScope = vars.getObject(&quot;currentScope&quot;);
currentSpan.updateName(prev.getSampleLabel());


currentScope.close();
currentSpan.end();
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">2000</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Kafka Consumers" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1292970976">requestTopic</stringProp>
            <stringProp name="1666468206">responseTopic</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-14293054">
              <stringProp name="-231258033">Waiter-Requests</stringProp>
              <stringProp name="-1233085145">Waiter-Responses</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create Consumer" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.common.serialization.StringDeserializer

def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:29092&quot;) // Replace with your Kafka broker address
props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;test-group&quot;) // Consumer group ID
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.name)
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.name)
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;latest&quot;) // Start reading from the latest offset

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;String, String&gt;(props)

// Subscribe to topics
consumer.subscribe(Arrays.asList(vars.get(&quot;responseTopic&quot;))); // Replace with your topic name

vars.putObject(&quot;consumer&quot;, consumer);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Poll Responses" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Poll Kafka Responses" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import io.opentelemetry.context.propagation.TextMapGetter;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.header.Headers;
import io.opentelemetry.context.Context;
import io.opentelemetry.api.common.Attributes;
import io.opentelemetry.api.common.AttributeKey;
import java.util.concurrent.TimeUnit;

def currentSpan = vars.getObject(&quot;currentSpan&quot;);
def tracer = props.get(&quot;tracer&quot;);
TextMapGetter&lt;ConsumerRecord&lt;String, String&gt;&gt; getter = new TextMapGetter&lt;ConsumerRecord&lt;String, String&gt;&gt;() {

    @Override
    public Iterable&lt;String&gt; keys(ConsumerRecord&lt;String, String&gt; consumerRecord) {
        Headers headers = consumerRecord.headers();
        return () -&gt; headers.iterator().asIterator().map(header -&gt; header.key());
    }

    @Override
    public String get(ConsumerRecord&lt;String, String&gt; consumerRecord, String key) {
        Headers headers = consumerRecord.headers();
        if (headers.lastHeader(key) != null) {
            return new String(headers.lastHeader(key).value());
        }
        return null;
    }
}

def consumer = vars.getObject(&quot;consumer&quot;);

def records = consumer.poll(1000); // Poll for 1 second
for (record in records) {
     def extractedContext = props.get(&quot;sdk&quot;).getPropagators().getTextMapPropagator().extract(Context.current(), record, getter);
     def responseSpan = tracer.spanBuilder(&quot;kafka-response&quot;).addLink(currentSpan.getSpanContext()).setParent(extractedContext).startSpan();
     responseSpan.addEvent(&quot;kafka-resp-timestamp&quot;, Attributes.empty(), record.timestamp(), TimeUnit.MILLISECONDS);
     responseSpan.end();
}</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="OpenTelemetry Start Span" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.threads.JMeterVariables;
import io.opentelemetry.context.propagation.TextMapSetter;
import io.opentelemetry.context.Context;
import io.opentelemetry.api.trace.Span;



def tracer = props.get(&quot;tracer&quot;);

def currentSpan = tracer.spanBuilder(&quot;http request&quot;).setParent(Context.root()).startSpan();
def scope = currentSpan.makeCurrent();
vars.putObject(&quot;currentSpan&quot;, currentSpan);
vars.putObject(&quot;currentScope&quot;, scope);

TextMapSetter&lt;JMeterVariables&gt; setter = new TextMapSetter&lt;JMeterVariables&gt;() {
	@Override
	public void set(JMeterVariables carrier, String key, String value){
			carrier.put(key, value);
	}
}
vars.put(&quot;traceID&quot;, Span.current().getSpanContext().getTraceId().toString());
props.get(&quot;sdk&quot;).getPropagators().getTextMapPropagator().inject(Context.current().with(currentSpan), vars, setter);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OpenTelemetry End Span" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import io.opentelemetry.context.Context;
import org.apache.jmeter.protocol.http.sampler.HTTPSampleResult;


def currentSpan = vars.getObject(&quot;currentSpan&quot;);
def currentScope = vars.getObject(&quot;currentScope&quot;);
currentSpan.updateName(prev.getSampleLabel());


currentSpan.end();
currentScope.close();
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">//props.get(&quot;opentelemetry&quot;).close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/jakubdering/Desktop/apache-jmeter-5.6.2/bin/samplejtl.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.reporters.FlexibleFileWriter guiclass="kg.apc.jmeter.reporters.FlexibleFileWriterGui" testclass="kg.apc.jmeter.reporters.FlexibleFileWriter" testname="jp@gc - Flexible File Writer" enabled="false">
        <stringProp name="filename">${logpath}/newTest.jtl</stringProp>
        <stringProp name="columns">{ &quot;endTime&quot; : |endTime|, &quot;success&quot; : |isSuccsessful|, &quot;label&quot; : &quot;|sampleLabel|&quot;, &quot;latency&quot; : |latency|, &quot;connect_time&quot; : |connectTime|, &quot;responseTime&quot; : |responseTime|, &quot;receivedBytes&quot; : |receivedBytes|, &quot;responseSize&quot; : |responseSize|, &quot;responseCode&quot; : |responseCode|, &quot;startTime&quot; : |startTime|, &quot;threadGroup&quot; : &quot;|threadName|&quot;,  &quot;grpThreads&quot; : |grpThreads|, &quot;responseMessage&quot;: &quot;|responseMessage|&quot;, &quot;threadCount&quot; : |threadsCount|, &quot;traceID&quot; : &quot;|variable#0|&quot;}\r\n</stringProp>
        <boolProp name="overwrite">true</boolProp>
        <stringProp name="header"></stringProp>
        <stringProp name="footer"></stringProp>
      </kg.apc.jmeter.reporters.FlexibleFileWriter>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="kafka.acks" elementType="Argument">
              <stringProp name="Argument.name">kafka.acks</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.bootstrap.servers" elementType="Argument">
              <stringProp name="Argument.name">kafka.bootstrap.servers</stringProp>
              <stringProp name="Argument.value">localhost:29092</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.topic" elementType="Argument">
              <stringProp name="Argument.name">kafka.topic</stringProp>
              <stringProp name="Argument.value">JMETER_REPORTING</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.sample.filter" elementType="Argument">
              <stringProp name="Argument.name">kafka.sample.filter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.fields" elementType="Argument">
              <stringProp name="Argument.name">kafka.fields</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.test.mode" elementType="Argument">
              <stringProp name="Argument.name">kafka.test.mode</stringProp>
              <stringProp name="Argument.value">info</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.parse.all.req.headers" elementType="Argument">
              <stringProp name="Argument.name">kafka.parse.all.req.headers</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.parse.all.res.headers" elementType="Argument">
              <stringProp name="Argument.name">kafka.parse.all.res.headers</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.timestamp" elementType="Argument">
              <stringProp name="Argument.name">kafka.timestamp</stringProp>
              <stringProp name="Argument.value">yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZZ</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.compression.type" elementType="Argument">
              <stringProp name="Argument.name">kafka.compression.type</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.enabled" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.enabled</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.key.password" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.key.password</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.keystore.location" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.keystore.location</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.keystore.password" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.keystore.password</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.truststore.location" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.truststore.location</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.truststore.password" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.truststore.password</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.enabled.protocols" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.enabled.protocols</stringProp>
              <stringProp name="Argument.value">TLSv1.2,TLSv1.1,TLSv1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.keystore.type" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.keystore.type</stringProp>
              <stringProp name="Argument.value">JKS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.protocol" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.protocol</stringProp>
              <stringProp name="Argument.value">TLS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.provider" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.provider</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.ssl.truststore.type" elementType="Argument">
              <stringProp name="Argument.name">kafka.ssl.truststore.type</stringProp>
              <stringProp name="Argument.value">JKS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.batch.size" elementType="Argument">
              <stringProp name="Argument.name">kafka.batch.size</stringProp>
              <stringProp name="Argument.value">16384</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.client.id" elementType="Argument">
              <stringProp name="Argument.name">kafka.client.id</stringProp>
              <stringProp name="Argument.value">JMeterKafkaBackendListener</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="kafka.connections.max.idle.ms" elementType="Argument">
              <stringProp name="Argument.name">kafka.connections.max.idle.ms</stringProp>
              <stringProp name="Argument.value">180000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="runid" elementType="Argument">
              <stringProp name="Argument.name">runid</stringProp>
              <stringProp name="Argument.value">17</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">io.github.rahulsinghai.jmeter.backendlistener.kafka.KafkaBackendClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
